# shellcheck shell=sh
set -e

# constants
COMMON_TIER1="aarch64 x86_64"

### tools

# $1 tool
# $2.. optional additional paths
require_tool() {
  local tool="$1"
  shift

  for i in "$@"; do
    if [ -x "$i/${tool}" ]; then
      echo "$i/${tool}"
      return 0
    fi
  done

  local toolpath
  if ! toolpath="$(command -v "${tool}" 2>/dev/null)"; then
    1>&2 echo This script requires the "${tool}" executable. If you have that outside of PATH
    1>&2 echo you can point at it using the environment variable "$(echo "${tool}" | tr '[:lower:]' '[:upper:]')".
    echo /usr/bin/false
    return 1
  fi
  echo "${toolpath}"
  return 0
}

: "${CURL:=$(require_tool curl)}"
: "${FIND:=$(require_tool find)}"
: "${READLINK:=$(require_tool readlink)}"
: "${MD5SUM:=$(require_tool md5sum)}"
: "${SHA256SUM:=$(require_tool sha256sum)}"
: "${SHA512SUM:=$(require_tool sha512sum)}"
: "${XARGS:=$(require_tool xargs)}"

quote_snippet() {
  for i in "$@"; do
    set -- "$@" \'"$i"\'
  done
}

join_with_prefix() {
  local separator="$1"
  local prefix="$2"
  shift 2

  if [ $# -eq 0 ]; then
    return 0
  fi

  printf "%s" "${prefix}$1"
  shift
  while [ $# -gt 0 ]; do
    printf "%s" "${separator}${prefix}$1"
    shift
  done
}

# create a wrapper with additional prepended arguments
# if no arguments are given, a symlink will do
mk_wrapper() {
  local tgt_file="$1"
  shift
  if [ $# -eq 1 ]; then
    ln -s "$1" "${tgt_file}"
  else
    cat >"${tgt_file}" <<EOF
#!/bin/sh
exec $@ "\$@"
EOF
    chmod +x "${tgt_file}"
  fi
}

# $1 - checksum
# $2 - file
shacheck() {
  local alg
  case "${#1}" in
    32) alg="${MD5SUM}" ;;
    64) alg="${SHA256SUM}" ;;
    128) alg="${SHA512SUM}" ;;
    *)
      1>&2 echo Unknown SHA length "${#1}" for checksum "$1" of file "$2"
      return 1
      ;;
  esac
  echo "$1 $2" | "${alg}" --strict --status --check -
}
# $1 - file
shacompute() {
  ${SHA256SUM} "$1" | cut -d" " -f 1
}

cache() {
  local url="$1"
  local base="${2:-$(basename "${url}")}"
  local sha256="$3"

  local cache_file="${CACHE_DIR}/${base}"
  >&2 echo Caching "${url}" to "${cache_file}"
  mkdir -p "$(dirname "${cache_file}")"
  echo "${url}" >"${cache_file}".url
  if [ -e "${cache_file}" ] && [ "${sha256}" ] && shacheck "${sha256}" "${cache_file}"; then
    # 2>&1 echo SHA matched
    echo "${cache_file}"
    return 0
  fi
  ${CURL} --disable --cookie /dev/null --show-error --fail \
    --location --remote-time \
    -o "${cache_file}" "${url}"
  if [ "${sha256}" ] && ! shacheck "${sha256}" "${cache_file}"; then
    1>&2 echo Freshly downloaded "${url}" does not match expected SHA-256 "${sha256}", removing it.
    rm "${cache_file}"
    echo /dev/null
    return 1
  fi
  echo "${cache_file}"
}

fix_abs_link() {
  local file
  local abs_link
  local dir

  ${FIND} "$1" -lname "/*" | while IFS= read -r file; do
    abs_link="$(readlink "${file}")"
    dir="$(dirname "${file}")"
    dir="$(echo "${dir#"$1"}" | sed -E 's%/([^/]+)%../%g')"
    dir="${dir%/}"
    ln -sf "${dir}${abs_link}" "${file}"
  done
}

### emitters

# environment definition for legacy tooling
# we use the wrappers
emit_meta_env() {
  local wrapname="$1"
  local sysroot=

  if [ "${KSYSROOT_TRIPLE}" != "native" ]; then
    sysroot="KSYSROOT_SYSROOT=\"${KSYSROOT_SYSROOT}\""
  fi

  cat <<EOF
#!/bin/sh
if [ \$# -ne 0 ]; then
  set -a
fi

KSYSROOT_PREFIX="${KSYSROOT_PREFIX_ABS}"
KSYSROOT_TRIPLE="${KSYSROOT_TRIPLE}"
KSYSROOT_FULL_TRIPLE="${KSYSROOT_FULL_TRIPLE}"
${sysroot}

LLVM_BINDIR="${LLVM_DIR}"
LLD_BINDIR="${LLD_DIR}"

LLVM_CONFIG=\${LLVM_BINDIR}/llvm-config
PKG_CONFIG=\${KSYSROOT_PREFIX}/bin/${wrapname}-pkg-config
PKG_CONFIG_FOR_BUILD=${PKG_CONFIG}

CC=\${KSYSROOT_PREFIX}/bin/${wrapname}-cc
CC_FOR_BUILD=\${LLVM_BINDIR}/clang
CXX=\${KSYSROOT_PREFIX}/bin/${wrapname}-c++
CXX_FOR_BUILD=\${LLVM_BINDIR}/clang++
CPP=\${KSYSROOT_PREFIX}/bin/${wrapname}-cpp
CPP_FOR_BUILD=\${LLVM_BINDIR}/clang-cpp
LD=\${KSYSROOT_PREFIX}/bin/${wrapname}-ld
LD_FOR_BUILD=\${LLD_BINDIR}/${NATIVE_LINKER}

AR=\${LLVM_BINDIR}/llvm-ar
AS=\${LLVM_BINDIR}/llvm-as
NM=\${LLVM_BINDIR}/llvm-nm
OBJCOPY=\${LLVM_BINDIR}/llvm-objcopy
OBJDUMP=\${LLVM_BINDIR}/llvm-objdump
RANLIB=\${LLVM_BINDIR}/llvm-ranlib
READELF=\${LLVM_BINDIR}/llvm-readelf
SIZE=\${LLVM_BINDIR}/llvm-size
STRINGS=\${LLVM_BINDIR}/llvm-strings
STRIP=\${LLVM_BINDIR}/llvm-strip

if [ \$# -ne 0 ]; then
  exec "\$@"
fi
EOF
}

# emit cross pkg-config personality
# $1 - libpath
# $@ - pkgconfig_paths
emit_meta_pc() {
  local libpath="$1"
  shift 1
  local pkgconfig_paths
  pkgconfig_paths="$(join_with_prefix : "${KSYSROOT_SYSROOT}" "$@")"

  cat <<EOF
Triplet: ${KSYSROOT_FULL_TRIPLE}
SysrootDir: ${KSYSROOT_SYSROOT}
DefaultSearchPaths: ${pkgconfig_paths}
SystemIncludePaths: ${KSYSROOT_SYSROOT}/usr/include
SystemLibraryPaths: ${KSYSROOT_SYSROOT}${libpath}
EOF
}

# emit generic meson cross/native files
# useful Meson constants:
#   sysroot -- our sysroot
#   triple  -- our triple
#   llvm_bindir_${name} - directory to llvm binaries
#   lld_bindir_${name} - directory to lld binaries
# With Meson we don't need to use the wrappers!
emit_meta_llvm() {
  local name="$1"
  local ld

  local pkg_config=

  if [ "${name}" = "native" ]; then
    pkg_config="'${PKG_CONFIG}'"
    ld="${NATIVE_LINKER}"
    ksysroot_dir=
  else
    pkg_config="ksysroot_dir_${name} / 'bin' / triple + '-pkg-config'"
    ld="${KSYSROOT_LINKER}"
    ksysroot_dir="ksysroot_dir_${name} = '${KSYSROOT_PREFIX_ABS}'"
  fi

  cat <<EOF
[binaries]
llvm-config = llvm_bindir_${name} / 'llvm-config'
pkg-config = ${pkg_config}

c = llvm_bindir_${name} / 'clang'
c_ld = lld_bindir_${name} / '${ld}'
cpp = llvm_bindir_${name} / 'clang++'
cpp_ld = lld_bindir_${name} / '${ld}'

ar = llvm_bindir_${name} / 'llvm-ar'
as = llvm_bindir_${name} / 'llvm-as'
ld = lld_bindir_${name} / '${ld}'
nm = llvm_bindir_${name} / 'llvm-nm'
objcopy = llvm_bindir_${name} / 'llvm-objcopy'
objdump = llvm_bindir_${name} / 'llvm-objdump'
ranlib = llvm_bindir_${name} / 'llvm-ranlib'
readelf = llvm_bindir_${name} / 'llvm-readelf'
size = llvm_bindir_${name} / 'llvm-size'
strings = llvm_bindir_${name} / 'llvm-strings'
strip = llvm_bindir_${name} / 'llvm-strip'

[constants]
llvm_bindir_${name} = '${LLVM_DIR}'
lld_bindir_${name} = '${LLD_DIR}'
${ksysroot_dir}
EOF
}

# emit meson cross files (complete with generic part)
# $1 - name
# $@ - pkg_config paths
emit_meta_llvm_cross() {
  local name="$1"
  shift
  local first=yes

  for i in "$@"; do
    if [ "${first}" = "yes" ]; then
      set --
      first=no
    fi
    set -- "$@" \'"${i#/}"\'
  done
  local pkgconfig_paths
  pkgconfig_paths="$(join_with_prefix " + ':' + " "sysroot / " "$@")"

  emit_meta_llvm "${name}"

  cat <<EOF
triple = '${KSYSROOT_FULL_TRIPLE}'
sysroot = '${KSYSROOT_SYSROOT}'
common_quirk_args = [${KSYSROOT_COMMON_QUIRK_ARGS_MESON}]
common_args = ['-target', triple, '--sysroot=' + sysroot] + common_quirk_args
cpp_quirk_args = [${KSYSROOT_CPP_QUIRK_ARGS_MESON}]
cpp_link_quirk_args = [${KSYSROOT_CPP_LINK_QUIRK_ARGS_MESON}]

[properties]
needs_exe_wrapper = true
sys_root = sysroot

[host_machine]
system = '${MESON_SYSTEM}'
cpu_family = '${MESON_CPUFAMILY}'
cpu = '${MESON_CPU}'
endian = '${MESON_ENDIAN}'

[built-in options]
c_args = common_args
cpp_args = common_args + cpp_quirk_args
c_link_args = common_args
cpp_link_args = common_args + cpp_link_quirk_args
pkg_config_path = ${pkgconfig_paths}
EOF
}

# create wrappers for legacy uses
mk_wrappers() {
  local wrapname
  local sysroot_args=
  local common_args="${KSYSROOT_COMMON_QUIRK_ARGS_WRAP}"
  local pkgconf_args=
  local useld_args=

  mkdir -p "${KSYSROOT_PREFIX_ABS}"/bin
  if [ "${KSYSROOT_TRIPLE}" = "native" ]; then
    wrapname="native"
  else
    wrapname="${KSYSROOT_FULL_TRIPLE}"
    # shellcheck disable=SC2089
    sysroot_args="--sysroot=\"${KSYSROOT_SYSROOT}\""
    common_args="-target ${KSYSROOT_FULL_TRIPLE} ${sysroot_args} ${common_args}"
    # shellcheck disable=SC2089
    pkgconf_args="--personality=\"${KSYSROOT_PREFIX_ABS}/pkg-config.personality\""
  fi
  # shellcheck disable=SC2089
  useld_args="-fuse-ld=\"${LLD_DIR}/${KSYSROOT_LINKER}\""

  local clang_tools="cc c++ cpp"
  local _llvm_tools="ar as nm objcopy objdump ranlib readelf size strings strip"

  # shellcheck disable=SC2086 disable=SC2090
  mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${wrapname}-pkg-config" "${PKG_CONFIG}" ${pkgconf_args}
  # shellcheck disable=SC2086 disable=SC2090
  mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${wrapname}-cc" "${LLVM_DIR}"/clang ${common_args} ${useld_args}
  # shellcheck disable=SC2086 disable=SC2090
  mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${wrapname}-c++" "${LLVM_DIR}"/clang++ ${common_args} ${KSYSROOT_CPP_QUIRK_ARGS_WRAP} ${useld_args}
  # shellcheck disable=SC2086 disable=SC2090
  mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${wrapname}-cpp" "${LLVM_DIR}"/clang-cpp ${common_args}
  # shellcheck disable=SC2086 disable=SC2090
  mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${wrapname}-ld" "${LLD_DIR}/${KSYSROOT_LINKER}" ${sysroot_args}

  emit_meta_env "${wrapname}" >"${KSYSROOT_PREFIX_ABS}"/bin/"${wrapname}"-env
  chmod +x "${KSYSROOT_PREFIX_ABS}"/bin/"${wrapname}"-env

  if [ "${KSYSROOT_LINK_TRIPLE}" ]; then
    for i in env pkg-config ${clang_tools} ld; do
      mk_wrapper "${KSYSROOT_PREFIX_ABS}/bin/${KSYSROOT_LINK_TRIPLE}-$i" "${wrapname}-$i"
    done
  fi
}

### common code

ksysroot_prefix() {
  KSYSROOT_PREFIX="$1"
  mkdir -p "${KSYSROOT_PREFIX}"
  KSYSROOT_PREFIX_ABS="$(${READLINK} -f "${KSYSROOT_PREFIX}")"
  KSYSROOT_SYSROOT="${KSYSROOT_PREFIX_ABS}/cross"
}

# $1 - libpath
# $@ - pkg-config-paths
ksysroot_emit() {
  mk_wrappers
  emit_meta_llvm native >"${KSYSROOT_PREFIX}"/native.txt
  if [ "${KSYSROOT_TRIPLE}" != "native" ]; then
    local libpath="$1"
    shift

    emit_meta_pc "${libpath}" "$@" >"${KSYSROOT_PREFIX}"/pkg-config.personality
    emit_meta_llvm_cross cross "$@" >"${KSYSROOT_PREFIX}"/cross.txt
  fi
}

ksysroot_bomconstants() {
  printf "# KSYSROOT_TRIPLE=%s KSYSROOT_FULL_TRIPLE=%s\n" "${KSYSROOT_TRIPLE}" "${KSYSROOT_FULL_TRIPLE}"
  printf "# KSYSROOT_OSFLAVOUR=%s KSYSROOT_OSRELEASE=%s\n" "${KSYSROOT_OSFLAVOUR}" "${KSYSROOT_OSRELEASE}"
  printf "# KSYSROOT_LINKER=%s\n" "${KSYSROOT_LINKER}"
  printf "# KSYSROOT_LICENSE=%s\n" "${KSYSROOT_LICENSE}"
  printf "# MESON_SYSTEM=%s MESON_CPUFAMILY=%s MESON_CPU=%s MESON_ENDIAN=%s\n" "${MESON_SYSTEM}" "${MESON_CPUFAMILY}" "${MESON_CPU}" "${MESON_ENDIAN}"
}

# $1 - tgtprefix
# $2 - optional file, stdin if empty
# $3 - optional link-triple
ksysroot_frombom() {

  KSYSROOT_LINK_TRIPLE="$3"

  ksysroot_prefix "$1"

  mkdir -p "${KSYSROOT_SYSROOT}"
  local pkg version url file sha256
  while read -r pkg version url file sha256; do
    1>&2 echo PKG="${pkg}" VERSION="${version}" URL="${url}" FILE="${file}" SHA256="${sha256}"
    if [ "${pkg}" = "#" ]; then
      # shellcheck disable=SC2046
      export $(echo "${version}" "${url}" "${file}" "${sha256}" | ${XARGS})
    else
      if [ "${KSYSROOT_TRIPLE}" = "native" ]; then
        ksysroot_native_bomresource "${pkg}" "${version}" "${url}" "${file}" "${sha256}"
      else
        ksysroot_"${KSYSROOT_OSFLAVOUR}"_bomresource "${pkg}" "${version}" "${url}" "${file}" "${sha256}"
      fi
    fi
  done <"${2:-/dev/fd/0}"
  if [ "${KSYSROOT_TRIPLE}" = "native" ]; then
    ksysroot_native_bomclose
  else
    ksysroot_"${KSYSROOT_OSFLAVOUR}"_bomclose
  fi
}
