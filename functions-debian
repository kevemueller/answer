# shellcheck shell=sh
set -e

: "${BSDTAR:=$(require_tool bsdtar)}"
: "${MKTEMP:=$(require_tool mktemp)}"

# unpack the Debian archive passed in $1
# pass remaining args to actual extractor
undeb() {
  local debfile="$1"
  shift
  ${BSDTAR} -Oxzf "${debfile}" data.tar.xz | ${BSDTAR} -z "$@"
}

DEBIAN_TIER1="aarch64 x86_64"
DEBIAN_TIER2="i586 mips64el powerpc64le"
DEBIAN_TIER3="armel armhf mipsel s390x"

DEBIAN_PRODUCTION1="12"
DEBIAN_PRODUCTION2="13"

debian_flavour() {
  local arch="$1"
  local abi
  case "${arch}" in
    armel)
      arch=arm
      abi=gnueabi
      ;;
    armhf)
      arch=arm
      abi=gnueabihf
      ;;
    mips64el*)
      abi=gnuabi64
      ;;
    *)
      abi=gnu
      ;;
  esac
  printf "%s-linux-%s@debian%s\n" "${arch}" "${abi}" "$2"
}

# Debian Tier 1 platforms on stable
ksysroot_debian_iterate1() {
  local arch_type version

  for arch_type in ${DEBIAN_TIER1}; do
    for version in ${DEBIAN_PRODUCTION1}; do
      debian_flavour "${arch_type}" "${version}"
    done
  done
}

# Debian Tier 1 platforms on testing
# Debian Tier 2 platforms on stable
ksysroot_debian_iterate2() {
  local arch_type version

  for arch_type in ${DEBIAN_TIER1}; do
    for version in ${DEBIAN_PRODUCTION2}; do
      debian_flavour "${arch_type}" "${version}"
    done
  done
  for arch_type in ${DEBIAN_TIER2}; do
    for version in ${DEBIAN_PRODUCTION1}; do
      debian_flavour "${arch_type}" "${version}"
    done
  done
}

# Debian Tier 2 platforms on testing
# Debian Tier 3 platforms on stable
ksysroot_debian_iterate3() {
  local arch_type version

  for arch_type in ${DEBIAN_TIER2}; do
    for version in ${DEBIAN_PRODUCTION2}; do
      debian_flavour "${arch_type}" "${version}"
    done
  done
  for arch_type in ${DEBIAN_TIER3}; do
    for version in ${DEBIAN_PRODUCTION1}; do
      debian_flavour "${arch_type}" "${version}"
    done
  done
}

ksysroot_debian_iterate() {
  ksysroot_debian_iterate1
  ksysroot_debian_iterate2
  ksysroot_debian_iterate3
}

# set variables describing the sysroot
# $1 - flavoured base triple
#   e.g. aarch64-linux-gnu@debian12
# sets
# * KSYSROOT_FLAVOUR
# * DEBIAN_NAME, DEBIAN_VERSION, DEBIAN_GCC, DEBIAN_ARCH
# * MESON_CPU, MESON_CPUFAMILY, MESON_ENDIAN, MESON_SYSTEM
ksysroot_debian_meta() {
  local basetriple="${1%@*}"
  local flavour="${1#*@}"

  if [ "${basetriple}" = "${flavour}" ]; then
    flavour=debian12
  fi

  DEBIAN_VERSION="${flavour#debian}"
  1>&2 echo input="$1" basetriple="${basetriple}" flavour="${flavour}"

  # /usr/local/sbin/debootstrap --print-debs --arch=amd64  --cache-dir=$PWD/cache/debian bullseye tmp | grep "gcc.*base"
  case "${DEBIAN_VERSION}" in
    10)
      DEBIAN_NAME="buster"
      DEBIAN_GCC="8"
      ;;
    11)
      DEBIAN_NAME="bullseye"
      DEBIAN_GCC="10"
      ;;
    12)
      DEBIAN_NAME="bookworm"
      DEBIAN_GCC="12"
      ;;
    13)
      DEBIAN_NAME="trixie"
      DEBIAN_GCC="14"
      ;;
    14)
      DEBIAN_NAME="forky"
      DEBIAN_GCC="14"
      ;;
    *)
      echo Unknown debian version "${DEBIAN_VERSION}"
      return 1
      ;;
  esac
  KSYSROOT_OSFLAVOUR="debian"
  KSYSROOT_OSRELEASE="${DEBIAN_VERSION}"

  # https://wiki.debian.org/Multiarch/Tuples#Why_not_use_GNU_triplets.3F
  case "${basetriple}" in
    # RELEASED
    aarch64-linux*-gnu)
      DEBIAN_ARCH=arm64
      MESON_CPUFAMILY="aarch64"
      ;;
    arm-linux*-gnueabi)
      DEBIAN_ARCH=armel
      MESON_CPUFAMILY="arm"
      ;;
    arm-linux*-gnueabihf)
      DEBIAN_ARCH=armhf
      MESON_CPUFAMILY="arm"
      ;;
    i386-linux*-gnu | i586-linux*-gnu | i686-linux*-gnu)
      DEBIAN_ARCH=i386
      MESON_CPUFAMILY="x86"
      ;;
    mipsel-linux*-gnu*)
      DEBIAN_ARCH="mipsel"
      MESON_CPUFAMILY="mips"
      ;;
    powerpc64le-linux*-gnu)
      DEBIAN_ARCH=ppc64el
      MESON_CPUFAMILY="ppc64"
      ;;
    s390x-linux*-gnu)
      DEBIAN_ARCH=s390x
      MESON_CPUFAMILY="s390x"
      MESON_ENDIAN=big
      ;;
    x86_64-linux*-gnu | amd64-linux*-gnu)
      DEBIAN_ARCH=amd64
      MESON_CPUFAMILY="x86_64"
      ;;
    # DEVELOPMENT
    i386-gnu | i586-gnu | i686-gnu)
      DEBIAN_ARCH=hurd-i386
      MESON_CPUFAMILY=x86
      ;;
    loongarch64-linux*-gnu)
      DEBIAN_ARCH=loong64
      MESON_CPUFAMILY=loongarch64
      ;;
    mips64el-linux*-gnuabi64)
      DEBIAN_ARCH="mips64el"
      MESON_CPUFAMILY="mips64"
      ;;
    powerpc-linux*-gnuspe)
      DEBIAN_ARCH="powerpcspe"
      MESON_CPUFAMILY="ppc"
      MESON_ENDIAN=big
      ;;
    powerpc64-linux*-gnu)
      DEBIAN_ARCH=ppc64
      MESON_CPUFAMILY="ppc64"
      MESON_ENDIAN=big
      ;;
    riscv64-linux*-gnu)
      DEBIAN_ARCH="riscv64"
      MESON_CPUFAMILY="riscv64"
      ;;
    sh4-linux*-gnu)
      DEBIAN_ARCH=sh4
      MESON_CPUFAMILY="sh4"
      ;;
    sparc64-linux*-gnu)
      DEBIAN_ARCH=sparc64
      MESON_CPUFAMILY="sparc64"
      MESON_ENDIAN=big
      ;;
    x86_64-gnu | amd64-gnu)
      DEBIAN_ARCH=hurd-amd64
      MESON_CPUFAMILY="x86_64"
      ;;
    # PLANNING
    arc-linux*-gnu)
      DEBIAN_ARCH=arc
      MESON_CPUFAMILY=arc
      ;;
    mipsisa32r6el-linux*-gnu)
      DEBIAN_ARCH=mipsr6el
      MESON_CPUFAMILY=mips
      ;;
    mipsisa64r6el-linux*-gnuabi64)
      DEBIAN_ARCH=mips64r6
      MESON_CPUFAMILY=mips64
      ;;
    # NONE
    aarch64-linux*-gnu_ilp32)
      DEBIAN_ARCH=arm64ilp32
      MESON_CPUFAMILY=aarch64
      ;;
    mips64-linux*-gnuabi64)
      DEBIAN_ARCH=mips64
      MESON_CPUFAMILY=mips64
      MESON_ENDIAN=big
      ;;
    mips64-linux*-gnuabin32)
      DEBIAN_ARCH=mipsn32
      MESON_CPUFAMILY=mips64
      MESON_ENDIAN=big
      ;;
    mips64el-linux*-gnuabin32)
      DEBIAN_ARCH=mipsn32el
      MESON_CPUFAMILY=mips64
      ;;
    mipsisa32r6-linux*-gnu)
      DEBIAN_ARCH=mipsr6
      MESON_CPUFAMILY=mips
      MESON_ENDIAN=big
      ;;
    mipsisa64r6-linux*-gnuabi64)
      DEBIAN_ARCH=mips64r6
      MESON_CPUFAMILY=mips64
      MESON_ENDIAN=big
      ;;
    mipsisa64r6-linux*-gnuabin32)
      DEBIAN_ARCH=mipsn32r6
      MESON_CPUFAMILY=mips64
      MESON_ENDIAN=big
      ;;
    mipsisa64r6el-linux*-gnuabin32)
      DEBIAN_ARCH=mipsn32r6el
      MESON_CPUFAMILY=mips64
      ;;
    x86_64-linux*-gnux32)
      DEBIAN_ARCH=x32
      MESON_CPUFAMILY=x86_64
      ;;
    # EOL
    alpha-linux*-gnu)
      DEBIAN_ARCH=alpha
      MESON_CPUFAMILY=alpha
      ;;
    arm-linux*-gnu)
      DEBIAN_ARCH=arm
      MESON_CPUFAMILY=arm
      ;;
    i386-kfreebsd*-gnu | i586-kfreebsd*-gnu | i686-kfreebsd*-gnu)
      DEBIAN_ARCH=kfreebsd-i386
      MESON_CPUFAMILY="x86"
      ;;
    ia64-linux*-gnu)
      DEBIAN_ARCH=ia64
      MESON_CPUFAMILY=ia64
      ;;
    hppa-linux*-gnu)
      DEBIAN_ARCH=hppa
      MESON_CPUFAMILY=parisc
      MESON_ENDIAN=big
      ;;
    m68k-linux*-gnu)
      DEBIAN_ARCH=m68k
      MESON_CPUFAMILY=m68k
      MESON_ENDIAN=big
      ;;
    mips-linux*-gnu*)
      DEBIAN_ARCH="mips"
      MESON_CPUFAMILY="mips"
      MESON_ENDIAN=big
      ;;
    powerpc-linux*-gnu)
      DEBIAN_ARCH=powerpc
      MESON_CPUFAMILY="ppc"
      MESON_ENDIAN=big
      ;;
    s390-linux*-gnu)
      DEBIAN_ARCH=s390
      MESON_CPUFAMILY="s390"
      MESON_ENDIAN=big
      ;;
    sparc-linux*-gnu)
      DEBIAN_ARCH=sparc
      MESON_CPUFAMILY="sparc"
      MESON_ENDIAN=big
      ;;
    x86_64-kfreebsd*-gnu | amd64-kfreebsd*-gnu)
      DEBIAN_ARCH=kfreebsd-amd64
      MESON_CPUFAMILY="x86_64"
      ;;
    *)
      DEBIAN_ARCH=unknown
      MESON_CPUFAMILY="unknown"
      ;;
  esac
  MESON_CPU=${MESON_CPUFAMILY}
  : "${MESON_ENDIAN:=little}"
  MESON_SYSTEM="linux"
  KSYSROOT_LINKER="ld.lld"
  KSYSROOT_LICENSE="GPL-2.0-or-later"
}

debian_quirks() {
  case "${KSYSROOT_TRIPLE}" in
    powerpc64le-linux-gnu | s390x-linux-gnu)
      KSYSROOT_COMMON_QUIRK_ARGS_MESON="'--gcc-install-dir=' + sysroot / 'usr/lib/gcc/${KSYSROOT_TRIPLE}/${DEBIAN_GCC}'"
      KSYSROOT_COMMON_QUIRK_ARGS_WRAP="--gcc-install-dir=\"${KSYSROOT_SYSROOT}/usr/lib/gcc/${KSYSROOT_TRIPLE}/${DEBIAN_GCC}\""
      ;;
    *) ;;
  esac
}

call_debootstrap() {
  local cache_dir_abs
  cache_dir_abs="$(readlink -f "${CACHE_DIR}")"
  local db_tmp mixin
  db_tmp="$(${MKTEMP} -d "${CACHE_DIR}"/ksysroot-debootstrap-XXXXXX)"
  mixin="$(${MKTEMP})"
  cat >"${mixin}" <<'EOF'
. "${DEBOOTSTRAP_DIR}"/scripts/"${SUITE}"

work_out_debs () {
	required="${FORCE_REQUIRED}"
	base=""
}
EOF

  FORCE_REQUIRED="libstdc++-${DEBIAN_GCC}-dev" 1>&2 ${FAKEROOT} "${DEBOOTSTRAP}" \
    "$@" --arch="${DEBIAN_ARCH}" \
    --cache-dir="${cache_dir_abs}"/debian \
    "${DEBIAN_NAME}" "${db_tmp}" \
    http://deb.debian.org/debian "${mixin}"

  rm "${mixin}"
  echo "${db_tmp}"
}

debian_emit_bom() {
  : "${PASTE:=$(require_tool paste)}"

  local db_tmp="$1"
  ${PASTE} -d" " "${db_tmp}"/debootstrap/deburis "${db_tmp}"/debootstrap/debpaths |
    while read -r pkg version url pkgd file; do
      test "${pkg}" = "${pkgd}" || echo mismatch at "${pkg}"
      # 1>&2 echo PKG="${pkg}" URL="${url}" FILE="$(basename "${file}")"
      debfile="debian/$(basename "${file}")"
      sha256="$(shacompute "${CACHE_DIR}/${debfile}")"
      printf "%s %s %s %s %s\n" "${pkg}" "${version}" "${url}" "${debfile}" "${sha256}"
    done
}

debian_fixup() {
  fix_abs_link "${KSYSROOT_SYSROOT}"

  for i in "${KSYSROOT_SYSROOT}"/usr/lib*; do
    local b
    b="$(basename "$i")"
    test -e "${KSYSROOT_SYSROOT}"/"$b" || ln -s usr/"$b" "${KSYSROOT_SYSROOT}"/"$b"
  done

  KSYSROOT_TRIPLE="$(basename "$(ls -d "${KSYSROOT_SYSROOT}"/usr/lib/*gnu*)")"
  KSYSROOT_FULL_TRIPLE="$(printf "%s" "${KSYSROOT_TRIPLE}" | sed "s/linux/linux${LINUX_VERSION}/")"

  debian_quirks
  ksysroot_emit /usr/lib/"${KSYSROOT_TRIPLE}" /usr/lib/"${KSYSROOT_TRIPLE}"/pkgconfig
}

# $1 - flavoured base triple
# emits metadata and URLs that are required to build the sysroot
# caches the downloaded DEBs in ${CACHE_DIR}/debian
# slow, as it needs to obtain archive index and download all DEBs
ksysroot_debian_bom() {
  : "${DEBOOTSTRAP:=$(require_tool debootstrap /usr/local/sbin /usr/sbin)}"

  local db_tmp

  ksysroot_debian_meta "$1"
  mkdir -p "${CACHE_DIR}"/debian

  db_tmp="$(call_debootstrap --download-only)"

  LINUX_VERSION="$(sed -nE 's/^linux-libc-dev[[:space:]]+([0-9]+)\.([0-9]+).*$/\1.\2/p' "${db_tmp}"/debootstrap/deburis)"
  LIBC6_DEB="$(sed -nE 's/^libc6 (.*)/\1/p' "${db_tmp}"/debootstrap/debpaths)"
  KSYSROOT_TRIPLE="$(undeb "${db_tmp}${LIBC6_DEB}" --list ./usr/lib | sed -nE 's%^./usr/lib/(.*-linux-gnu[0-9a-z]*)/.*$%\1%p' | uniq)"
  KSYSROOT_FULL_TRIPLE="$(printf "%s" "${KSYSROOT_TRIPLE}" | sed "s/linux/linux${LINUX_VERSION}/")"

  ksysroot_bomconstants
  printf "# DEBIAN_VERSION=%s DEBIAN_NAME=%s DEBIAN_GCC=%s\n" "${DEBIAN_VERSION}" "${DEBIAN_NAME}" "${DEBIAN_GCC}"
  printf "# DEBIAN_ARCH=%s LINUX_VERSION=%s\n" "${DEBIAN_ARCH}" "${LINUX_VERSION}"
  debian_emit_bom "${db_tmp}"

  rm -rf "${db_tmp}"
}

ksysroot_debian_bomresource() {
  local pkg="$1"
  local version="$2"
  local url="$3"
  local file="$4"
  local sha256="$5"

  if [ "${pkg}" = linux-libc-dev ]; then
    local suffix="${version#*.*.}"
    LINUX_VERSION="${version%."${suffix}"}"
  fi
  local cached_deb
  cached_deb="$(cache "${url}" "${file}" "${sha256}")"

  # NB: HFS+ is case preserving, not case-sensitive, hence
  # usr/include/linux/netfilter/xt_CONNMARK.h and usr/include/linux/netfilter/xt_connmark.h
  # will overwrite each other
  undeb "${cached_deb}" -C "${KSYSROOT_SYSROOT}" --extract \
    --exclude ./etc --exclude "./*bin" --exclude "./*/*bin" --exclude ./var \
    -s '%^\./lib\(.*\)%./usr/lib\1%'
}

ksysroot_debian_bomclose() {
  debian_fixup
}

# $1 - flavoured base triple
# $2 - target directory
#   e.g. aarch64-linux-gnu@debian12
ksysroot_debian_install() {
  : "${DEBOOTSTRAP:=$(require_tool debootstrap /usr/local/sbin /usr/sbin)}"

  ksysroot_prefix "${2:-ksysroot-$1}"

  local db_tmp

  ksysroot_debian_meta "$1"

  mkdir -p "${CACHE_DIR}"/debian

  if ${DEBOOTSTRAP} --help | grep "unprivileged" >/dev/null; then
    db_tmp="$(call_debootstrap --unprivileged --merged-usr --foreign)"
  else
    : "${FAKEROOT:=$(require_tool fakeroot)}"
    db_tmp="$(call_debootstrap --merged-usr --foreign)"
  fi

  LINUX_VERSION="$(debian_emit_bom "${db_tmp}" | sed -nE 's/^linux-libc-dev[[:space:]]+([0-9]+)\.([0-9]+).*$/\1.\2/p')"

  rm -rf "${db_tmp:?}"/usr/*bin
  mkdir -p "${KSYSROOT_SYSROOT}"

  for i in lib lib64 usr; do
    test -e "${db_tmp}/${i}" && mv "${db_tmp}/${i}" "${KSYSROOT_SYSROOT}/${i}"
  done

  rm -rf "${db_tmp}"

  debian_fixup
}
