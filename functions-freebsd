# shellcheck shell=sh
set -e

: "${XARGS:=$(require_tool xargs)}"
: "${TAR:=$(require_tool tar)}"


# Flavour examples
#   aarch64-freebsd14.2@freebsd14.2-RELEASE
#   x86_64-freebsd14.2@freebsd14.2-RELEASE

FREEBSD_TIER1="aarch64 x86_64"
FREEBSD_TIER2="i686 powerpc powerpcspe powerpc64 powerpc64le riscv64" # armv7 has no base.txz
FREEBSD_TIER3="" # armv6 has no base.txz

FREEBSD_PRODUCTION1="14.2-RELEASE"
FREEBSD_PRODUCTION2="14.1-RELEASE 13.4-RELEASE 13.3-RELEASE"
FREEBSD_SNAP="15.0-CURRENT 14.2-STABLE 13.4-STABLE"

freebsd_flavour() {
    local vnum="${2%-*}"
    printf "%s-freebsd%s@freebsd%s\n" "$1" "${vnum}" "$2"
}

# FreeBSD Tier 1 platforms on most recent supported Release
ksysroot_freebsd_iterate1() {
    local arch_type version

    for arch_type in ${FREEBSD_TIER1} ; do
        for version in ${FREEBSD_PRODUCTION1}; do
            freebsd_flavour "${arch_type}" "${version}"
        done
    done
}

# FreeBSD Tier 1 platforms on legacy supported Releases + snapshots
# FreeBSD Tier 2 platforms on most recent supported Releases
ksysroot_freebsd_iterate2() {
    local arch_type version

    for arch_type in ${FREEBSD_TIER1}; do
        for version in ${FREEBSD_PRODUCTION2} ${FREEBSD_SNAP}; do
            freebsd_flavour "${arch_type}" "${version}"
        done
    done
    for arch_type in ${FREEBSD_TIER2}; do
        for version in ${FREEBSD_PRODUCTION1}; do
            freebsd_flavour "${arch_type}" "${version}"
        done
    done
}


# FreeBSD Tier 2 platforms on legacy supported Releases + snapshots
# FreeBSD Tier 3 platforms on most recent supported Releases
ksysroot_freebsd_iterate3() {
    local arch_type version

    for arch_type in ${FREEBSD_TIER2}; do
        for version in ${FREEBSD_PRODUCTION2} ${FREEBSD_SNAP}; do
            freebsd_flavour "${arch_type}" "${version}"
        done
    done
    for arch_type in ${FREEBSD_TIER3}; do
        for version in ${FREEBSD_PRODUCTION1}; do
            freebsd_flavour "${arch_type}" "${version}"
        done
    done
}

ksysroot_freebsd_iterate() {
    ksysroot_freebsd_iterate1
    ksysroot_freebsd_iterate2
    ksysroot_freebsd_iterate3
}

freebsd_quirks() {
    case "$(uname -s)" in
        Linux)
            case "$(${LLVM_DIR}/clang++ --version)" in
                "Homebrew clang"*)
                    # Homebrew Clang on Ubuntu fails to detect libc++
                    # Ubuntu Clang & Homebrew Clang on MacOS are fine 
                    KSYSROOT_CPP_QUIRK_ARGS="-stdlib=libc++"
                    ;;
                *)
                    ;;
            esac
            ;;
        *)
            ;;
    esac
}

# $1 - flavoured base triple
ksysroot_freebsd_meta() {
    local basetriple="${1%@*}"
    local flavour="${1#*@}"
    FREEBSD_VERSION="${flavour#freebsd}"

    case "${basetriple}" in
        aarch64*)
            FREEBSD_MACHINE=arm64
            _FREEBSD_MACHINE_CPUARCH=aarch64
            FREEBSD_MACHINE_ARCH=aarch64
            MESON_CPUFAMILY="aarch64"
            ;;
        armv7*)
            FREEBSD_MACHINE=arm
            _FREEBSD_MACHINE_CPUARCH=arm
            FREEBSD_MACHINE_ARCH=armv7
            MESON_CPUFAMILY="arm"
            ;;
        i386*|i686*)
            FREEBSD_MACHINE=i386
            _FREEBSD_MACHINE_CPUARCH=i386
            FREEBSD_MACHINE_ARCH=i386
            MESON_CPUFAMILY="x86"
            ;;
        powerpc-*)
            FREEBSD_MACHINE=powerpc
            _FREEBSD_MACHINE_CPUARCH=powerpc
            FREEBSD_MACHINE_ARCH=powerpc
            MESON_CPUFAMILY="ppc"
            ;;
        powerpcspe-*)
            FREEBSD_MACHINE=powerpc
            _FREEBSD_MACHINE_CPUARCH=powerpc
            FREEBSD_MACHINE_ARCH=powerpcspe
            MESON_CPUFAMILY="ppc"
            ;;
        powerpc64-*)
            FREEBSD_MACHINE=powerpc
            _FREEBSD_MACHINE_CPUARCH=powerpc
            FREEBSD_MACHINE_ARCH=powerpc64
            MESON_CPUFAMILY="ppc64"
            ;;
        powerpc64le-*)
            FREEBSD_MACHINE=powerpc
            _FREEBSD_MACHINE_CPUARCH=powerpc
            FREEBSD_MACHINE_ARCH=powerpc64le
            MESON_CPUFAMILY="ppc64"
            ;;
        riscv64-*)
            FREEBSD_MACHINE=riscv
            _FREEBSD_MACHINE_CPUARCH=riscv
            FREEBSD_MACHINE_ARCH=riscv64
            MESON_CPUFAMILY="riscv64"
            ;;
        amd64*|x86_64*)
            FREEBSD_MACHINE=amd64
            _FREEBSD_MACHINE_CPUARCH=amd64
            FREEBSD_MACHINE_ARCH=amd64
            MESON_CPUFAMILY="x86_64"
            ;;
        *)
            echo Unknown FREEBSD_MACHINE "${basetriple}"
            return 1
            ;;
    esac
    MESON_CPU=${MESON_CPUFAMILY}
    : "${MESON_ENDIAN:=little}"
    MESON_SYSTEM="freebsd"

    KSYSROOT_OSFLAVOUR="freebsd"
    KSYSROOT_OSRELEASE="${FREEBSD_VERSION}"
    KSYSROOT_TRIPLE="${basetriple}"
    # x86_64-unknown-freebsd13.2
    KSYSROOT_FULL_TRIPLE="${basetriple}"
    KSYSROOT_LINKER="ld.lld"
}

# $1 - flavoured base triple
# emits the URLs that are required to build the sysroot
ksysroot_freebsd_bom() {
    ksysroot_freebsd_meta "$1"

    local freebsd_base_url
    case "${FREEBSD_VERSION}" in
        *-RELEASE|*-RC?|*-BETA?)
            freebsd_base_url=${FREEBSD_MIRROR}/releases
            ;;
        *-STABLE|*-CURRENT)
            freebsd_base_url=${FREEBSD_MIRROR}/snapshots
            ;;       
        *)
            echo Unknown version "${version}"
            return 1
            ;;
    esac
    ksysroot_bomconstants
    printf "# FREEBSD_VERSION=%s FREEBSD_MACHINE=%s FREEBSD_MACHINE_ARCH=%s\n" "${FREEBSD_VERSION}" "${FREEBSD_MACHINE}" "${FREEBSD_MACHINE_ARCH}"
    printf "%s %s %s %s\n" "base.txz" "${FREEBSD_VERSION}" \
     "${freebsd_base_url}/${FREEBSD_MACHINE}/${FREEBSD_MACHINE_ARCH}/${FREEBSD_VERSION}/base.txz" \
     "freebsd/${FREEBSD_MACHINE}_${FREEBSD_MACHINE_ARCH}_freebsd${FREEBSD_VERSION}-base.txz"
}


ksysroot_freebsd_bomresource() {
    local _pkg="$1"
    local version="$2"
    local url="$3"
    local file="$4"

    cache "${url}" "${file}"
    ${TAR} -C "${KSYSROOT_SYSROOT}" -xf "${CACHE_DIR}/${file}" ./lib ./usr/lib ./usr/include ./usr/libdata/pkgconfig
}

ksysroot_freebsd_bomclose() {
    # Brew removes empty directories, keep them
    ${FIND} "${KSYSROOT_SYSROOT}" -type d -empty | ${XARGS} -I'{}' touch '{}'/.empty
    fix_abs_link "${KSYSROOT_SYSROOT}"
    freebsd_quirks
    ksysroot_emit /usr/lib /usr/local/libdata/pkgconfig /usr/libdata/pkgconfig
}

ksysroot_freebsd_install() {
    ksysroot_freebsd_bom "$1" | ksysroot_frombom "${2:-ksysroot-$1}"
}

ksysroot_freebsd_pkgbase() {
	# FreeBSD-clibs-dev FreeBSD-clibs FreeBSD-libcompiler_rt-dev
    echo FIXME: implement
    return 1
}
