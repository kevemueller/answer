# shellcheck shell=sh
set -e

: "${XARGS:=$(require_tool xargs)}"
: "${TAR:=$(require_tool tar)}"

# Flavour examples
#   aarch64-freebsd14.2@freebsd14.2-RELEASE
#   x86_64-freebsd14.2@freebsd14.2-RELEASE

FREEBSD_TIER2="i686 powerpc powerpcspe powerpc64 powerpc64le riscv64" # armv7 has no base.txz
FREEBSD_TIER3=""                                                      # armv6 has no base.txz

FREEBSD_PRODUCTION1="14.2-RELEASE"
FREEBSD_PRODUCTION2="14.1-RELEASE 13.4-RELEASE 13.3-RELEASE"
FREEBSD_SNAP="15.0-CURRENT 14.2-STABLE 13.4-STABLE"

freebsd_flavour() {
  local vnum="${2%-*}"
  printf "%s-freebsd%s@FreeBSD%s\n" "$1" "${vnum}" "$2"
}

# FreeBSD Tier 1 platforms on most recent supported Release
ksysroot_FreeBSD_iterate1() {
  local arch_type version

  for arch_type in ${COMMON_TIER1}; do
    for version in ${FREEBSD_PRODUCTION1}; do
      freebsd_flavour "${arch_type}" "${version}"
    done
  done
}

# FreeBSD Tier 1 platforms on legacy supported Releases + snapshots
# FreeBSD Tier 2 platforms on most recent supported Releases
ksysroot_FreeBSD_iterate2() {
  local arch_type version

  for arch_type in ${COMMON_TIER1}; do
    for version in ${FREEBSD_PRODUCTION2} ${FREEBSD_SNAP}; do
      freebsd_flavour "${arch_type}" "${version}"
    done
  done
  for arch_type in ${FREEBSD_TIER2}; do
    for version in ${FREEBSD_PRODUCTION1}; do
      freebsd_flavour "${arch_type}" "${version}"
    done
  done
}

# FreeBSD Tier 2 platforms on legacy supported Releases + snapshots
# FreeBSD Tier 3 platforms on most recent supported Releases
ksysroot_FreeBSD_iterate3() {
  local arch_type version

  for arch_type in ${FREEBSD_TIER2}; do
    for version in ${FREEBSD_PRODUCTION2} ${FREEBSD_SNAP}; do
      freebsd_flavour "${arch_type}" "${version}"
    done
  done
  for arch_type in ${FREEBSD_TIER3}; do
    for version in ${FREEBSD_PRODUCTION1}; do
      freebsd_flavour "${arch_type}" "${version}"
    done
  done
}

ksysroot_FreeBSD_iterate() {
  ksysroot_FreeBSD_iterate1
  ksysroot_FreeBSD_iterate2
  ksysroot_FreeBSD_iterate3
}

freebsd_quirks() {
  case "$(uname -s)" in
    Linux)
      case "$("${LLVM_DIR}"/clang++ --version)" in
        "Homebrew clang"*)
          # Homebrew Clang on Ubuntu fails to detect libc++
          # Ubuntu Clang & Homebrew Clang on MacOS are fine
          KSYSROOT_CPP_QUIRK_ARGS_WRAP="-stdlib=libc++"
          KSYSROOT_CPP_QUIRK_ARGS_MESON="'-stdlib=libc++'"
          ;;
        *) ;;
      esac
      ;;
    *) ;;
  esac
}

# $1 - flavoured base triple
ksysroot_FreeBSD_meta() {
  local basetriple="${1%@*}"
  local flavour="${1#*@}"

  if [ "${basetriple}" = "${flavour}" ]; then
    FREEBSD_KERNEL="${basetriple##*freebsd}"
    flavour=FreeBSD${FREEBSD_KERNEL:-14.2}-RELEASE
    FREEBSD_VERSION="${flavour#FreeBSD}"
  else
    FREEBSD_VERSION="${flavour#FreeBSD}"
  fi
  FREEBSD_KERNEL="${FREEBSD_VERSION%%-*}"

  case "${basetriple}" in
    aarch64*)
      FREEBSD_MACHINE=arm64
      _FREEBSD_MACHINE_CPUARCH=aarch64
      FREEBSD_MACHINE_ARCH=aarch64
      MESON_CPUFAMILY="aarch64"
      basetriple="aarch64-freebsd${FREEBSD_KERNEL}"
      ;;
    armv7*)
      FREEBSD_MACHINE=arm
      _FREEBSD_MACHINE_CPUARCH=arm
      FREEBSD_MACHINE_ARCH=armv7
      MESON_CPUFAMILY="arm"
      basetriple="arm-freebsd${FREEBSD_KERNEL}"
      ;;
    i386* | i686*)
      FREEBSD_MACHINE=i386
      _FREEBSD_MACHINE_CPUARCH=i386
      FREEBSD_MACHINE_ARCH=i386
      MESON_CPUFAMILY="x86"
      basetriple="i686-freebsd${FREEBSD_KERNEL}"
      ;;
    powerpc-*)
      FREEBSD_MACHINE=powerpc
      _FREEBSD_MACHINE_CPUARCH=powerpc
      FREEBSD_MACHINE_ARCH=powerpc
      MESON_CPUFAMILY="ppc"
      basetriple="powerpc-freebsd${FREEBSD_KERNEL}"
      ;;
    powerpcspe-*)
      FREEBSD_MACHINE=powerpc
      _FREEBSD_MACHINE_CPUARCH=powerpc
      FREEBSD_MACHINE_ARCH=powerpcspe
      MESON_CPUFAMILY="ppc"
      basetriple="powerpcspe-freebsd${FREEBSD_KERNEL}"
      ;;
    powerpc64-*)
      FREEBSD_MACHINE=powerpc
      _FREEBSD_MACHINE_CPUARCH=powerpc
      FREEBSD_MACHINE_ARCH=powerpc64
      MESON_CPUFAMILY="ppc64"
      basetriple="powerpc64-freebsd${FREEBSD_KERNEL}"
      ;;
    powerpc64le-*)
      FREEBSD_MACHINE=powerpc
      _FREEBSD_MACHINE_CPUARCH=powerpc
      FREEBSD_MACHINE_ARCH=powerpc64le
      MESON_CPUFAMILY="ppc64"
      basetriple="powerpc64le-freebsd${FREEBSD_KERNEL}"
      ;;
    riscv64-*)
      FREEBSD_MACHINE=riscv
      _FREEBSD_MACHINE_CPUARCH=riscv
      FREEBSD_MACHINE_ARCH=riscv64
      MESON_CPUFAMILY="riscv64"
      basetriple="riscv64-freebsd${FREEBSD_KERNEL}"
      ;;
    amd64* | x86_64*)
      FREEBSD_MACHINE=amd64
      _FREEBSD_MACHINE_CPUARCH=amd64
      FREEBSD_MACHINE_ARCH=amd64
      MESON_CPUFAMILY="x86_64"
      basetriple="x86_64-freebsd${FREEBSD_KERNEL}"
      ;;
    *)
      echo Unknown FREEBSD_MACHINE "${basetriple}"
      return 1
      ;;
  esac

  MESON_CPU=${MESON_CPUFAMILY}
  : "${MESON_ENDIAN:=little}"
  MESON_SYSTEM="freebsd"

  KSYSROOT_OSFLAVOUR="FreeBSD"
  KSYSROOT_OSRELEASE="${FREEBSD_VERSION}"
  # x86_64-freebsd13.2
  KSYSROOT_TRIPLE="${basetriple}"
  KSYSROOT_FULL_TRIPLE="${basetriple}"
  KSYSROOT_LINKER="ld.lld"
  KSYSROOT_LICENSE="BSD-2-Clause"
}

# $1 - flavoured base triple
# emits the URLs that are required to build the sysroot
ksysroot_FreeBSD_bom() {
  ksysroot_FreeBSD_meta "$1"

  local freebsd_base_url
  local freebsd_cache_file_prefix
  local manifest_file
  local base_sha256

  case "${FREEBSD_VERSION}" in
    *-RELEASE | *-RC? | *-BETA?)
      freebsd_base_url=${FREEBSD_MIRROR}/releases
      ;;
    *-STABLE | *-CURRENT)
      freebsd_base_url=${FREEBSD_MIRROR}/snapshots
      ;;
    *)
      echo Unknown version "${version}"
      return 1
      ;;
  esac
  freebsd_base_url="${freebsd_base_url}/${FREEBSD_MACHINE}/${FREEBSD_MACHINE_ARCH}/${FREEBSD_VERSION}"
  freebsd_cache_file_prefix="freebsd/${FREEBSD_MACHINE}_${FREEBSD_MACHINE_ARCH}_freebsd${FREEBSD_VERSION}-"
  manifest_file=$(cache "${freebsd_base_url}/MANIFEST" "${freebsd_cache_file_prefix}manifest")
  base_sha256=$(sed -nE 's/^base.txz[[:space:]]+([0-9a-fA-F]{64}).*/\1/p' "${manifest_file}")

  ksysroot_bomconstants
  printf "# FREEBSD_VERSION=%s FREEBSD_KERNEL=%s FREEBSD_MACHINE=%s FREEBSD_MACHINE_ARCH=%s\n" "${FREEBSD_VERSION}" "${FREEBSD_KERNEL}" "${FREEBSD_MACHINE}" "${FREEBSD_MACHINE_ARCH}"
  printf "%s %s %s %s %s\n" "base.txz" "${FREEBSD_VERSION}" \
    "${freebsd_base_url}/base.txz" \
    "${freebsd_cache_file_prefix}base.txz" \
    "${base_sha256}"
}

ksysroot_FreeBSD_bomresource() {
  local _pkg="$1"
  local version="$2"
  local url="$3"
  local file="$4"
  local sha256="$5"

  local resource_file
  resource_file="$(cache "${url}" "${file}" "${sha256}")"
  ${TAR} -C "${KSYSROOT_SYSROOT}" -xf "${resource_file}" ./lib ./usr/lib ./usr/include ./usr/libdata/pkgconfig
}

ksysroot_FreeBSD_bomclose() {
  # Brew removes empty directories, keep them
  ${FIND} "${KSYSROOT_SYSROOT}" -type d -empty | ${XARGS} -I'{}' touch '{}'/.empty
  fix_abs_link "${KSYSROOT_SYSROOT}"
  freebsd_quirks
  ksysroot_emit /usr/lib /usr/local/libdata/pkgconfig /usr/libdata/pkgconfig
}

ksysroot_FreeBSD_install() {
  ksysroot_FreeBSD_bom "$1" | ksysroot_frombom "${2:-ksysroot-$1}" "$3"
}

ksysroot_FreeBSD_pkgbase() {
  # FreeBSD-clibs-dev FreeBSD-clibs FreeBSD-libcompiler_rt-dev
  echo FIXME: implement
  return 1
}
